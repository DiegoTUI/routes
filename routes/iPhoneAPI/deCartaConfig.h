//
//  CONFIG.h
//  iPhoneApp
//
//  Created by Z.S. on 1/31/11.
//  Copyright 2011 deCarta, Inc. All rights reserved.
//

#ifndef DECARTACONFIG_H
#define DECARTACONFIG_H

#import <Foundation/Foundation.h>

/*!
 * @ingroup Global
 * @struct deCartaConfigStruct
 * This data structure is used to create the g_config global struct, 
 * which is used to configure the API. Authentication parameters in this
 * structure must be configured before using the API.
 * @brief Global API Configuration Structure
 */ 
typedef struct {
        /*! DDS Web Services client name
         * MUST BE SET BEFORE USING THE API.
         * Example: "map-sample-app"
         */
	__unsafe_unretained NSString * clientName;

        /*! DDS Web Services client password
         * MUST BE SET BEFORE USING THE API.
         * Example: "letmein"
         */
	__unsafe_unretained NSString * clientPassword;

	     /*! DDS Web Services Host URL
         * MUST BE SET BEFORE USING THE API.
         * Example: "http://ws.decarta.com/openls/openls"
         */
	__unsafe_unretained NSString * host;

	/*! DDS Web Services configuration string that controls the type of
         * data (if more than one type is available) and the display of the
         * map images. This configuration is used if the deCarta iPhone API
         * detects a low-resolution display.
         * MUST BE SET BEFORE USING THE API.
         * Example: "global-decarta"
         */
	__unsafe_unretained NSString * configuration_default;

        /*! An alternate DDS Web Services configuration string used when the
         * deCarta iPhone API detects a high-resolution display.
         * MUST BE SET BEFORE USING THE API.
         * Example: "global-decarta-hi-res"
         */
	__unsafe_unretained NSString * configuration_high_res;

        /*! An alternate DDS Web Services configuration string used when the
         * the map type is set to HYBRID_MAP_TYPE.
         * MUST BE SET BEFORE USING THE API.
         * Example: "global-mobile-transparent"
         */
	__unsafe_unretained NSString * transparentConfiguration;
	
        /*! Pixel square tile size
         * Default: 256
         */
	int TILE_SIZE;

        /*! Tile Cache Memory Size
         * Default: 5
         */
	int TILE_THREAD_COUNT;

        /*! Size of the map tile cache
         * Default: 3000
         */
	int CACHE_SIZE;

        /*! Set to cache tiles only when network access is slow
         * Default: TRUE
         */
	BOOL ONLY_CACHE_NETWORK_SLOW;

        /*! Minimum zoom level (zoomed full-out)
         * Default: 1
         */
	int ZOOM_LOWER_BOUND;

        /*! Maximum zoom level (zoomed full-in)
         * Default: 20
         */
	int ZOOM_UPPER_BOUND;

        /*! If set to TRUE, map will always snap to the closest integer
         * zoom level.
         * Default: TRUE
         */
	BOOL SNAP_TO_CLOSEST_ZOOMLEVEL;

        /*! When zooming and redrawing tiles at the new zoom level, fading is
		 * used to provide a smooth transition from one zoom level to another.
		 * This value specifies the duration of the fade, in seconds.
         * Default: 0.2
         */
	double FADING_TIME;

        /*! When set to TRUE, tilting is enabled for the map display.
         * Default: FALSE
         */
	BOOL ENABLE_TILT;

        /*! When set to TRUE, rotation is enabled for the map display.
         * Default: FALSE
         */
	BOOL ENABLE_ROTATE;

        /*! Specifies the location of the compass, using one of the values of
         * deCartaCompassLocationEnum (COMPASS_TOP_LEFT,
         * COMPASS_TOP_RIGHT, COMPASS_BOTTOM_LEFT, or COMPASS_BOTTOM_RIGHT).
         * MUST BE SET BEFORE USING THE COMPASS.
         */
	int COMPASS_PLACE_LOCATION;

        /*! Inserts a visible border between map tiles. This value specifies
		 * the width of the border, in pixels. Only for debugging. Set to 0
		 * to disable the borders (default).
         */
	int BORDER;

        /*! A value which controls the deceleration of the map when panning.
		 * This value is a value between 0% (0.0) and 100% (1.0) which indicates
		 * the percentage deceleration every 33ms. Thus, higher values decelerate
		 * to a stop more quickly.
		 * For example, 0.8 indicates that every 33ms, the pan speed will reduce
		 * by 80% of it's original value.
         * Default: 0.8
         */
	double DECELERATE;
    
        /*! Background color of the map
         */
    int BACKGROUND_COLOR;
        /*! Background color of the grid line
         */
    int BACKGROUND_GRID_COLOR;
    
	/*!
         Controls the amount of debug information detail generated by the
         deCarta iPhone API (defined by the enumerated type in deCartaLogger.h)
	 LOG_LEVEL_DEBUG = 4,
	 LOG_LEVEL_INFO = 3, (Default)
	 LOG_LEVEL_WARN = 2,
	 LOG_LEVEL_FATAL = 1,
	 LOG_LEVEL_NONE = 0
	 */
	int LOG_LEVEL;

        /*! @internal For internal API use only.
         * Default: 1
         */
    /*! num of lines of message should be kept in the log */
    int LOG_SIZE;
    
    /*! tile url format as /openls/image/TILE or /openls/image-cache/TILE */
    __unsafe_unretained NSString * TILE_URL_SUFFIX;
    
	int STATELESS_SESSION_ID;

        /*! Defines the image format used by the API
         * Default: "PNG"
         */
	__unsafe_unretained NSString * IMAGE_FORMAT;

        /*! Indicates whether real-time traffic is enabled.
		 * Real-time traffic is not supported at this time.
         * Default: FALSE
         */
	BOOL REAL_TIME_TRAFFIC;

        /*! deCarta Drill-Down Server (DDS) Version to use
         * Default: "4.5.1"
         */
	__unsafe_unretained NSString *REL;

        /*! @internal For internal API use only.
         * Default: "2hq3AwyaQsMahDA5vYh1iBTaCMlFojTxLtCuzcIT2Ip7dY5d04VLPJEZvSSQd8u9"
         */
	__unsafe_unretained NSString *SATELLITE_KEY;
	
}deCartaConfigStruct;

/*!
 * @ingroup Global
 * @var g_config
 * The g_config structure is a globally defined deCartaConfigStruct which
 * controls the API configuration settings. It contains information that
 * is used throughout the deCarta iPhone API, and must be configured with
 * your user credentials in order for the API to access deCarta DDS Web
 * Services.
 */
extern deCartaConfigStruct g_config;

/*!
 * @ingroup Util
 * @class deCartaConfig
 * A class containing a method for printing the contents of the global
 * g_config configuration data structure.
 * @brief A class for printing the contents of the global g_config configuration data structure
 */
@interface deCartaConfig : NSObject {

}

/*! Prints a readable representation of the g_config global configuration
 * data structure.
 */
+(void)printConfig;

@end

#endif